#!/bin/bash

# Root of dotfiles
SOURCE="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/.."

# Include utils
source $SOURCE/script/bash_utils

TARGET=${1:-~}
if [ ! -d $TARGET ]; then
  fail "Invalid target: $TARGET"
  exit 1
fi

TARGET_LITERAL=$TARGET
[[ $TARGET_LITERAL == ~ ]] && TARGET_LITERAL='~' # reduce to '~'

BACKUP=`mktemp -d /tmp/dotfiles_backup_XXXXXX`
info "Old files will be put in $BACKUP"

function reuse_or_create_dir {
  mkdir "$BACKUP/$1"
  if [ ! -e "$TARGET/$1" ]; then
    mkdir "$TARGET/$1"
  elif [ ! -d "$TARGET/$1" ]; then
    mv "$TARGET/$1" "$BACKUP/$1"
    mkdir "$TARGET/$1"
  fi
}

reuse_or_create_dir bin
reuse_or_create_dir codes
if [[ $PLATFORM == 'darwin' ]]; then
  reuse_or_create_dir bin/darwin
fi
success 'Create bin and codes'

function link_and_backup {
  [ -e "$TARGET/$1" ] && mv "$TARGET/$1" "$BACKUP/$1"
  ln -s "$SOURCE/$2" "$TARGET/$1"
}

link_and_backup .vim vim/.vim
link_and_backup .vimrc vim/.vimrc
link_and_backup .custom_bashrc bash/.bashrc
link_and_backup .gitconfig git/.gitconfig
link_and_backup .tools_aliases bash/.tools_aliases
link_and_backup bin/git-svn-diff bin/git-svn-diff
link_and_backup bin/git-delete-submodule bin/git-delete-submodule
link_and_backup bin/seuroute bin/seuroute
link_and_backup bin/rename bin/rename
link_and_backup bin/svn-upgrade bin/svn-upgrade
link_and_backup bin/proxyon bin/proxyon
link_and_backup bin/proxyoff bin/proxyoff
if [[ $PLATFORM == 'darwin' ]]; then
  link_and_backup bin/darwin/adb bin/darwin/adb
  link_and_backup bin/darwin/fastboot bin/darwin/fastboot
elif [[ $PLATFORM == 'cygwin' ]]; then
  link_and_backup bin/sudo bin/sudo
  link_and_backup bin/pbcopy bin/pbcopy
  link_and_backup bin/pbpaste bin/pbpaste
  link_and_backup bin/ag bin/ag
  link_and_backup .minttyrc misc/.minttyrc
fi
# OS X doesn't have bash_profile on default
[ -e "$TARGET/.bash_profile" ] || ln -s "$TARGET/.bashrc" "$TARGET/.bash_profile"
# .vnc/xstartup vaires on different system, so just copy on need
[ -e "$TARGET/.vnc" ] || mkdir "$TARGET/.vnc"
[ -e "$TARGET/.vnc/xstartup" ] || cp "$SOURCE/vnc/xstartup" "$TARGET/.vnc/xstartup"
success "Link configuration files"

LASTLINE_OF_BASHRC=$(tail -n 1 "$TARGET/.bashrc" 2>/dev/null)
LASTLINE_TO_BE="source $TARGET_LITERAL/.custom_bashrc"
if [[ ! -e "$TARGET/.bashrc" ]]; then
  echo $LASTLINE_TO_BE > "$TARGET/.bashrc"
  success "Create $TARGET_LITERAL/.bashrc"
elif [[ $LASTLINE_OF_BASHRC != $LASTLINE_TO_BE ]]; then
  echo $LASTLINE_TO_BE >> "$TARGET/.bashrc"
  success "Inject $TARGET_LITERAL/.bashrc"
fi

if [[ $PLATFORM != 'cygwin' ]]; then
  SUDOER_LINE="$USER  ALL=(ALL)       NOPASSWD: ALL"
  if ! sudo grep -q "$SUDOER_LINE" /etc/sudoers; then
    sudo cp /etc/sudoers $BACKUP
    sudo bash -c 'echo >> /etc/sudoers'
    sudo bash -c "echo \"$SUDOER_LINE\" >> /etc/sudoers"
    success 'Inject /etc/sudoers'
  fi
fi

if [[ $PLATFORM == 'darwin' ]] && ! has_command brew; then
  progress 'Installng Homebrew'
  echo '' | ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
  brew install git
  success "Homebrew installed"
  brew update
fi

cd $SOURCE
git submodule sync --quiet
git submodule update --init --quiet --recursive
cd - > /dev/null

progress 'Downloading node'
if source "$SOURCE/script/update_node"; then
  if [[ $NODE_VERSION == $SYSTEM_NODE_VERSION ]]; then
    success 'Current node is already the latest version'
  else
    success "Node is updated to $NODE_VERSION"
  fi
else
  fail 'Cannot update node'
fi

if [[ $PLATFORM == 'darwin' ]]; then
  progress 'Installing other useful tools'
  has_command tree || cross_install tree
  has_command wget || cross_install wget
  has_command fortune || cross_install fortune
  has_command mosh || cross_install mobile-shell
  has_command ohcount || cross_install ohcount
  has_command s3cmd || cross_install s3cmd
  has_command gsed || cross_install gnu-sed
  has_command nak || sudo npm install -g nak
  has_command prettyjson || sudo npm install -g prettyjson
  has_command ag || cross_install the_silver_searcher
  success "Tools installed"
elif [[ $PLATFORM == 'linux-gnu' ]]; then
  progress 'Installing system tools'
  has_command tree || cross_install tree
  has_command fortune || cross_install fortune-mod
  has_command s3cmd || cross_install s3cmd
  has_command vim || cross_install vim
  has_command nak || sudo npm install -g nak
  has_command prettyjson || sudo npm install -g prettyjson

  if [[ $OS == 'Ubuntu' ]]; then
    if ! has_command mosh; then
      cross_install python-software-properties software-properties-common
      sudo add-apt-repository ppa:keithw/mosh
      sudo apt-get update
      cross_install mosh
    fi
    has_command ohcount || cross_install ohcount
    has_command g++ || cross_install build-essential automake autotools-dev
  elif [[ $OS == 'Fedora' ]]; then
    if ! has_command mosh; then
      cross_install mosh
    fi
  fi
  success "Tools installed"
elif [[ $PLATFORM == 'cygwin' ]]; then
  bash $SOURCE/script/create_windows_symlinks $TARGET
  success 'Create convenient symbol links'
fi

cp /etc/hosts $BACKUP
bash $SOURCE/script/update_hosts $SOURCE/etc/hosts
success 'Update hosts'

if [ ! -e "$TARGET/bin/depot_tools" ]; then
  progress 'Getting depot_tools'
  git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git "$TARGET/bin/depot_tools"
  success 'depot_tools downloaded'
fi

if [ ! -e "$TARGET/codes/xunlei-lixian" ]; then
  progress 'Getting xunlei-lixian'
  git clone https://github.com/iambus/xunlei-lixian.git "$TARGET/codes/xunlei-lixian"
  success 'xunlei-lixian downloaded'
fi

if [ ! -e "$TARGET/codes/gyp" ]; then
  progress 'Getting gyp'
  git clone https://github.com/svn2github/gyp.git "$TARGET/codes/gyp"
  cd "$TARGET/codes/gyp"
  sudo python setup.py install
  cd - > /dev/null
  success 'gyp downloaded'
fi

if [ ! -e "$TARGET/codes/boto" ]; then
  progress 'Getting boto'
  git clone https://github.com/boto/boto.git "$TARGET/codes/boto"
  cd "$TARGET/codes/boto"
  sudo python setup.py install
  cd - > /dev/null
  success 'boto downloaded'
fi

if [ ! -e "$TARGET/bin/hub" ]; then
  progress 'Getting hub'
  if curl http://defunkt.io/hub/standalone -sLo $TARGET/bin/hub &&
     chmod +x $TARGET/bin/hub; then
    success 'hub downloaded'
  else
    fail 'Cannot download hub'
  fi
fi

if [[ $PLATFORM == 'linux-gnu' ]]; then
  source "$SOURCE/script/solarize" light
fi

source "$TARGET/.custom_bashrc" nofortune
success 'Load new environment'

exit 0

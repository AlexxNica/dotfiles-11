#!/bin/bash

# Root of dotfiles
SOURCE="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/.."

# Include utils
source $SOURCE/script/bash_utils

TARGET=${1:-~}
if [ ! -d $TARGET ]; then
  fail "Invalid target: $TARGET"
  exit 1
fi

TARGET_LITERAL=$TARGET
[[ $TARGET_LITERAL == ~ ]] && TARGET_LITERAL='~' # reduce to '~'

BACKUP=`mktemp -d /tmp/dotfiles_backup_XXXXXX`
info "Old files will be put in $BACKUP"

function link_and_backup {
  [ -e "$TARGET/$1" ] && mv "$TARGET/$1" "$BACKUP/$1"
  ln -s "$SOURCE/$2" "$TARGET/$1"
}

link_and_backup .vim vim/.vim
link_and_backup .vimrc vim/.vimrc
link_and_backup .custom_bashrc bash/.bashrc
link_and_backup .tools_aliases bash/.tools_aliases
# .gitconfig contains machine-dependent information so don't link
[ -e "$TARGET/.gitconfig" ] || cp "$SOURCE/git/.gitconfig" "$TARGET/.gitconfig"
success "Link configuration files"

LASTLINE_OF_BASHRC=$(tail -n 1 "$TARGET/.bashrc" 2>/dev/null)
LASTLINE_TO_BE="source $TARGET_LITERAL/.custom_bashrc"
if [[ ! -e "$TARGET/.bashrc" ]]; then
  echo $LASTLINE_TO_BE > "$TARGET/.bashrc"
  success "Create $TARGET_LITERAL/.bashrc"
elif [[ $LASTLINE_OF_BASHRC != $LASTLINE_TO_BE ]]; then
  echo $LASTLINE_TO_BE >> "$TARGET/.bashrc"
  success "Inject $TARGET_LITERAL/.bashrc"
fi

SUDOER_LINE="$USER  ALL=(ALL)       NOPASSWD: ALL"
if ! sudo grep -q "$SUDOER_LINE" /etc/sudoers; then
  sudo cp /etc/sudoers $BACKUP
  sudo bash -c 'echo >> /etc/sudoers'
  sudo bash -c "echo \"$SUDOER_LINE\" >> /etc/sudoers"
  success 'Inject /etc/sudoers'
fi

cp /etc/hosts $BACKUP
source $SOURCE/script/update_hosts $SOURCE/etc/hosts
success 'Update hosts'

function reuse_or_create_dir {
  if [ ! -e "$TARGET/$1" ]; then
    mkdir "$TARGET/$1"
  elif [ ! -d "$TARGET/$1" ]; then
    mv "$TARGET/$1" "$BACKUP/$1"
    mkdir "$TARGET/$1"
  fi
}

reuse_or_create_dir bin
reuse_or_create_dir codes
success 'Create bin and codes'

if [[ $PLATFORM == 'darwin' ]]; then
  if ! has_command brew; then
    progress 'Installng Homebrew'
    ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
    success "Homebrew installed"
    brew update
  fi

  progress 'Installing other useful tools'
  has_command git || cross_install git
  has_command tree || cross_install tree
  has_command fortune || cross_install fortune
  has_command mosh || cross_install mobile-shell
  has_command ohcount || cross_install ohcount
  success "Tools installed"
elif [[ $PLATFORM == 'linux-gnu' ]]; then
  progress 'Installing system tools'
  has_command git || cross_install git
  has_command tree || cross_install tree
  has_command fortune || cross_install fortune-mod

  if [[ $OS == 'Ubuntu' ]]; then
    if ! has_command mosh; then
      cross_install python-software-properties software-properties-common
      sudo add-apt-repository ppa:keithw/mosh
      sudo apt-get update
      cross_install mosh
    fi
    has_command ohcount || cross_install ohcount
    has_command g++ || cross_install build-essential automake autotools-dev
  elif [[ $OS == 'Fedora' ]]; then
    if ! has_command mosh; then
      cross_install mosh
    fi
  fi
  success "Tools installed"
fi

progress 'Downloading node'
if source "$SOURCE/script/update_node"; then
  if [[ $NODE_VERSION == $SYSTEM_NODE_VERSION ]]; then
    success 'Current node is already the latest version'
  else
    success "Node is updated to $NODE_VERSION"
  fi
else
  fail 'Cannot update node'
fi

if [ ! -e "$TARGET/bin/depot_tools" ]; then
  progress 'Getting depot_tools'
  git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git "$TARGET/bin/depot_tools"
  success 'depot_tools downloaded'
fi

if [ ! -e "$TARGET/codes/xunlei-lixian" ]; then
  progress 'Getting xunlei-lixian'
  git clone https://github.com/iambus/xunlei-lixian.git "$TARGET/codes/xunlei-lixian"
  success 'xunlei-lixian downloaded'
fi

if [ ! -e "$TARGET/bin/hub" ]; then
  progress 'Getting hub'
  if curl http://defunkt.io/hub/standalone -sLo $TARGET/bin/hub &&
     chmod +x $TARGET/bin/hub; then
    success 'hub downloaded'
  else
    fail 'Cannot download hub'
  fi
fi

source "$TARGET/.custom_bashrc" nofortune
success 'Load new environment'

exit 0


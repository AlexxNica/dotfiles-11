#!/bin/bash

TARGET=${1:-~}
TARGET_LITERAL=$TARGET
if [[ $TARGET_LITERAL == ~ ]]; then
  TARGET_LITERAL='~'
fi

if [ ! -d $TARGET ]; then
  echo "Invalid target: $TARGET"
  exit 1
fi

# Root of dotfiles
SOURCE="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/.."

# Include utils
source $SOURCE/script/bash_utils

BACKUP=`mktemp -d /tmp/dotfiles_backup_XXXXXX`
echo "Old files will be put in $BACKUP"

function link_and_backup {
  [ -e "$TARGET/$1" ] && mv "$TARGET/$1" "$BACKUP/$1"
  ln -s "$SOURCE/$2" "$TARGET/$1"
}

echo -n 'Copying file...'
link_and_backup .vim vim/.vim
link_and_backup .vimrc vim/.vimrc
link_and_backup .custom_bashrc bash/.bashrc
link_and_backup .tools_aliases bash/.tools_aliases
[ -e "$TARGET/.gitconfig" ] || cp "$SOURCE/git/.gitconfig" "$TARGET/.gitconfig"
echo "[OK]"

echo -n 'Injecting .bashrc...'
LASTLINE_OF_BASHRC=$(tail -n 1 "$TARGET/.bashrc" 2>/dev/null)
if [[ ! -e "$TARGET/.bashrc" ]]; then
  echo "source $TARGET_LITERAL/.custom_bashrc" > "$TARGET/.bashrc"
elif [[ $LASTLINE_OF_BASHRC != "source $TARGET_LITERAL/.custom_bashrc" ]]; then
  echo "source $TARGET_LITERAL/.custom_bashrc" >> "$TARGET/.bashrc"
fi
echo "[OK]"

cp /etc/hosts $BACKUP
source $SOURCE/script/update_hosts $SOURCE/etc/hosts

function reuse_or_create_dir {
  if [ ! -e "$TARGET/$1" ]; then
    mkdir "$TARGET/$1"
  elif [ ! -d "$TARGET/$1" ]; then
    mv "$TARGET/$1" "$BACKUP/$1"
    mkdir "$TARGET/$1"
  fi
}

echo -n 'Creating bin and codes...'
reuse_or_create_dir bin
reuse_or_create_dir codes
echo "[OK]"

if [[ $PLATFORM == 'darwin' ]]; then
  if ! has_command brew; then
    echo -n 'Install Homebrew...'
    ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
    echo "[OK]"
    brew update
  fi

  echo 'Install other usefull tools..'
  has_command git || cross_install git
  has_command tree || cross_install tree
  has_command fortune || cross_install fortune
  has_command mosh || cross_install mobile-shell
  has_command ohcount || cross_install ohcount
elif [[ $PLATFORM == 'linux-gnu' ]]; then
  echo 'Install system requirements...'
  has_command git || cross_install git
  has_command tree || cross_install tree
  has_command fortune || cross_install fortune-mod

  if [[ $OS == 'Ubuntu' ]]; then
    if ! has_command mosh; then
      cross_install python-software-properties software-properties-common
      sudo add-apt-repository ppa:keithw/mosh
      sudo apt-get update
      cross_install mosh
    fi
    has_command ohcount || cross_install ohcount
  elif [[ $OS == 'Fedora' ]]; then
    if ! has_command mosh; then
      cross_install mosh
    fi
  fi
fi

if [ ! -e "$TARGET/bin/depot_tools" ]; then
  echo 'Getting depot_tools...'
  git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git "$TARGET/bin/depot_tools"
fi

if [ ! -e "$TARGET/codes/xunlei-lixian" ]; then
  echo 'Getting xunlei-lixian...'
  git clone https://github.com/iambus/xunlei-lixian.git "$TARGET/codes/xunlei-lixian"
fi

if [ ! -e "$TARGET/bin/hub" ]; then
  echo -n 'Getting hub...'
  curl http://defunkt.io/hub/standalone -sLo $TARGET/bin/hub &&
      chmod +x $TARGET/bin/hub
  echo '[OK]'
fi

echo -n 'Loading new environment...'
source "$TARGET/.custom_bashrc" nofortune
echo "[OK]"

exit 0

